---
description: When writing Django models
globs: **/models.py
alwaysApply: false
---

# Django Models

## Core Requirements

For every model, we:

- Use explicit `db_table` names (pluralized)
- Include helpful docstrings
- Use proper field types for financial data (DecimalField for money)
- Use help_text only when the field purpose isn't immediately clear
- Add verbose_names where they improve readability

## Model Structure

```python
from django.db import models
from decimal import Decimal

class Order(models.Model):
    """Represents a customer order

    Tracks order details, payment status, and fulfillment
    """

    customer = models.ForeignKey('Customer', on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    total_amount = models.DecimalField(
        max_digits=18,
        decimal_places=2,
        help_text="Total order amount in USD"
    )
    status = models.CharField(max_length=20, default='pending')

    class Meta:
        db_table = "orders"
        verbose_name_plural = "orders"
        ordering = ['-created_at']

    def __str__(self):
        return f"Order #{self.id} - {self.customer}"

    @property
    def is_complete(self) -> bool:
        return self.status == 'fulfilled'
```

## Financial Fields

We always use `DecimalField` for amounts: `max_digits=18, decimal_places=8` for crypto, `max_digits=18, decimal_places=2` for fiat.

## Query Optimization

We use `select_related()` for foreign keys, `prefetch_related()` for reverse relations, and add indexes for frequently queried fields.

## Field Guidelines

We use `auto_now_add=True` for creation timestamps, `auto_now=True` for update timestamps, and `blank=True, null=True` for truly optional fields.
