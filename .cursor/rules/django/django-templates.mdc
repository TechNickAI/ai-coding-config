---
description: When writing Django templates
globs: **/*.html, **/*.django
alwaysApply: false
---

# Django Templates

## Overview

We use base templates for shared layouts, create partials for reusable components, and
keep logic minimal (complex logic belongs in views or the model).

## Template Structure

```django
{% extends "base.html" %}

{% block title %}Page Title{% endblock %}

{% block content %}
  <div class="container">
    {% comment %}
    Developer note: This section shows order details
    {% endcomment %}

    <h1>{{ order.title }}</h1>

    {% if order.items %}
      <ul>
        {% for item in order.items %}
          <li>{{ item.name }} - ${{ item.price }}</li>
        {% endfor %}
      </ul>
    {% else %}
      <p>No items in this order.</p>
    {% endif %}
  </div>
{% endblock %}
```

## Comments

We use Django template comments `{% comment %}...{% endcomment %}` for developer notes.
HTML comments (`<!-- -->`) are sent to the browser, template comments are not.

## Template Tags and Filters

We use built-in tags when possible and create custom tags for complex reusable logic. We
keep filters simple and focused.

## Partials

Create reusable components as partials:

```django
{# _order_item.html #}
<div class="order-item">
  <h3>{{ item.name }}</h3>
  <p>${{ item.price }}</p>
</div>
```

Include with:

```django
{% include "_order_item.html" with item=order_item %}
```

## Best Practices

We keep templates simple and readable, extract repeated HTML into partials (named with
leading underscore), use template inheritance for consistency, and test with various
data states (empty lists, missing data, etc.).
