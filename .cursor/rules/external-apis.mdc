---
description: When calling external APIs
alwaysApply: false
---

# External API Client Guidelines

These guidelines ensure consistent, reliable, and maintainable API clients.

## Core Principles

- Return None on API errors (don't raise exceptions)
- Use type hints consistently
- Document all methods with comprehensive docstrings
- Use appropriate logging levels
- Let exceptions bubble up unless you're truly handling them

## Method Pattern

```python
def get_something(self, param: str) -> dict | None:
    """Fetch something from the API.

    Args:
        param: Description of parameter

    Returns:
        Dict containing data or None if not found/error
    """
    logger.info(f"Fetching something for {param}")

    response = self.request("/endpoint", params={"key": param})
    if not response:
        logger.warning(f"No data returned for {param}")
        return None

    return response["data"]
```

## Error Handling

- Let base HTTP client handle HTTP/network errors
- Only use try/except for specific scenarios with actual handling
- Always include context in error logs
- Validate response structure before access

## Validation Pattern

```python
response = self.request("/endpoint", params={"key": value})
if not response or "data" not in response:
    logger.warning(f"No data returned for {value}")
    return None
```

## Response Processing

- Validate response structure before access
- Convert to standard types (use Decimal for financial data)
- Clean and normalize data
- Handle missing data gracefully
- Return None for errors, not empty dicts

## Testing

- Mock all external calls in unit tests
- Use @pytest.mark.flaky for live API tests
- Test both success and error cases
- Verify response processing
