---
description: When writing code
alwaysApply: false
---

# Code Style and Zen of Python

## Line Length

- Max 88 chars (per Ruff config)

## Comments

### File-Level Comments

Be THOROUGH at the top of files. Explain what the file does, why it exists, and how it fits into the larger system. This helps both humans and AI understand context quickly.

```python
"""User authentication and session management.

Handles user login, logout, token generation, and session validation.
Integrates with external OAuth providers (Google, GitHub) and maintains
local session state in Redis for performance. Session tokens expire after
24 hours but can be refreshed up to 7 days from initial login.
"""
```

### Function Comments

Keep function docstrings USEFUL without redundant fluff. Type hints already document parameters and return types, so don't repeat that information.

```python
# ❌ BAD: Redundant Args/Returns that just restate type hints
def create_agent_from_task(self, task_id: str) -> dict:
    """Create a new agent from a ClickUp task description.
    
    Args:
        task_id: ClickUp task ID with agent requirements
        
    Returns:
        Dictionary with PR details and status
    """

# ✅ GOOD: Useful context about what it does and why
def create_agent_from_task(self, task_id: str) -> dict:
    """Create a new agent from a ClickUp task description.
    
    Parses task description for agent requirements, generates the .agent
    file with system/user prompts, creates PR with the new file, and
    returns PR URL for review.
    """

# ✅ GOOD: Simple function, one line is enough
def validate_email(email: str) -> bool:
    """Check if email format is valid and domain is not blacklisted."""
```

### Inline Comments

Be SPARSE with inline comments. Only add them when the code is doing something non-obvious or when explaining business logic that isn't clear from the code itself.

```python
# ❌ BAD: Obvious
user = User.objects.get(id=user_id)  # Get the user

# ✅ GOOD: Explains non-obvious business rule
user = User.objects.get(id=user_id)
if user.last_login < cutoff_date:
    # Inactive users over 90 days require re-verification per security policy
    send_verification_email(user)

# ✅ GOOD: Section dividers for organization
# ============================================================================
# Order Processing
# ============================================================================
```

### General Guidelines

- Explain the "why", not the "what"
- Don't state the obvious; prefer self-documenting code
- Emojis when they add clarity; tasteful humor welcome
- Write for humans AND AI - good comments help both understand context

## Zen of Python

1. Readability is the number 1 code quality metric
2. Beautiful is better than ugly
3. Explicit is better than implicit
4. Simple is better than complex
5. Complex is better than complicated
6. Flat is better than nested
7. Sparse is better than dense
8. Special cases aren't special enough to break the rules
   - Although practicality beats purity
9. Errors should never pass silently
   - Unless explicitly silenced
10. In the face of ambiguity, refuse the temptation to guess
11. There should be one -- and preferably only one -- obvious way to do it
12. Now is better than never

## Language

Avoid using hyperbolic "CRITICAL" - don't be so dramatic. Critical has a specific meaning - that the thing dies without it. AIs tend to overuse this word. Use the appropriate level of language for what is needed to properly communicate.
